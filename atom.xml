<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MLEAutoMaton&#39;s Blog</title>
  
  <subtitle>Welcome to MLE&#39;s World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.mle-world.cn/"/>
  <updated>2019-04-29T00:10:34.092Z</updated>
  <id>https://blog.mle-world.cn/</id>
  
  <author>
    <name>MLEAutoMaton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GX|GZOI2019Day1</title>
    <link href="https://blog.mle-world.cn/gx-gzoi2019day1/"/>
    <id>https://blog.mle-world.cn/gx-gzoi2019day1/</id>
    <published>2019-04-29T00:04:06.000Z</published>
    <updated>2019-04-29T00:10:34.092Z</updated>
    
    <content type="html"><![CDATA[<p>没有摘要<br><a id="more"></a></p><p><a href="https://blog.mle-world.cn/Summary/solution/GX%7CGZOI2019Day1.pdf">戳我看总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有摘要&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Summary" scheme="https://blog.mle-world.cn/categories/Summary/"/>
    
    
      <category term="省选题解" scheme="https://blog.mle-world.cn/tags/%E7%9C%81%E9%80%89%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[GXOI/GZOI2019]特技飞行</title>
    <link href="https://blog.mle-world.cn/gxoi-gzoi2019-%E7%89%B9%E6%8A%80%E9%A3%9E%E8%A1%8C/"/>
    <id>https://blog.mle-world.cn/gxoi-gzoi2019-特技飞行/</id>
    <published>2019-04-28T10:04:52.000Z</published>
    <updated>2019-04-28T10:10:27.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://loj.ac/problem/3085" target="_blank" rel="noopener">Loj</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>强行二合一海星…</p><h3 id="c的贡献"><a href="#c的贡献" class="headerlink" title="c的贡献"></a>c的贡献</h3><p>直接曼哈顿距离转切比雪夫距离然后扫描线就好了.<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ll ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> Y=lower_bound(o+<span class="hljs-number">1</span>,o+len+<span class="hljs-number">1</span>,p[i].y)-o;</span><br><span class="line"><span class="hljs-keyword">if</span>(p[i].opt)modify(Y,p[i].opt);</span><br><span class="line"><span class="hljs-keyword">else</span> ans+=query(Y)&gt;<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="a-b的贡献"><a href="#a-b的贡献" class="headerlink" title="a,b的贡献"></a>a,b的贡献</h3><p>考虑显然可以全用<code>对向交换</code>达成目标,那么现在问题转换成了:如何使用最多的<code>擦肩而过</code>满足条件.<br>每次的<code>对向交换</code>在最终的排列p上的作用体现即为交换了某两个元素的位置,所以我们只需要用最小的交换次数将p还原成原排列即可.<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">sort(f+<span class="hljs-number">1</span>,f+n+<span class="hljs-number">1</span>,cmp);<span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)g[f[i]]=i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(f[i]!=i)</span><br><span class="line">f[g[i]]=f[i],g[f[i]]=g[i],num++;</span><br></pre></td></tr></table></figure></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>交点不能够乱算…<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000010</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps=<span class="hljs-number">1e-10</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">double</span> x,y;</span><br><span class="line"><span class="hljs-keyword">int</span> opt;</span><br><span class="line"><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> point &amp;b)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;b.x;&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="hljs-keyword">double</span> o[N];</span><br><span class="line"><span class="hljs-keyword">int</span> n,a,b,c,x_st,x_ed,Y0[N],Y1[N],tot,len;</span><br><span class="line"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">int</span>&gt; pii;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="hljs-built_in">set</span>&lt;pii&gt;se;</span><br><span class="line"><span class="hljs-keyword">int</span> C[N],f[N],g[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> Y1[a]&lt;Y1[b];&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> d)</span></span>&#123;<span class="hljs-keyword">while</span>(x&lt;=len)C[x]+=d,x+=lowbit(x);&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ret=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(x)ret+=C[x],x-=lowbit(x);<span class="hljs-keyword">return</span> ret;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">freopen(<span class="hljs-string">"aerobatics.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"aerobatics.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line">n=gi();a=gi();b=gi();c=gi();x_st=gi();x_ed=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Y0[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Y1[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n;i;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:se)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(j.first&gt;Y1[i])<span class="hljs-keyword">break</span>;<span class="hljs-keyword">int</span> I=j.second;</span><br><span class="line"><span class="hljs-keyword">double</span> k1=(<span class="hljs-keyword">double</span>)((Y0[i]-Y1[i])*<span class="hljs-number">1.</span>/(x_st-x_ed)),b1=(<span class="hljs-keyword">double</span>)(Y0[i]-k1*<span class="hljs-number">1.</span>*x_st),k2=(<span class="hljs-keyword">double</span>)((Y0[I]-Y1[I])*<span class="hljs-number">1.</span>/(x_st-x_ed)),b2=(<span class="hljs-keyword">double</span>)(Y0[I]-k2*<span class="hljs-number">1.</span>*x_st);</span><br><span class="line"><span class="hljs-keyword">double</span> x=(<span class="hljs-keyword">double</span>)((b1-b2)*<span class="hljs-number">1.</span>/(k2-k1)),y=k1*<span class="hljs-number">1.</span>*x+b1;</span><br><span class="line">p[++tot]=(point)&#123;x+y,x-y,<span class="hljs-number">0</span>&#125;;o[++len]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">se.insert(mp(Y1[i],i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> jd=tot;</span><br><span class="line"><span class="hljs-keyword">int</span> k=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x=gi(),y=gi(),r=gi();</span><br><span class="line">x+=y;y=x-y-y;</span><br><span class="line">p[++tot]=(point)&#123;x-r-eps,y-r-eps,<span class="hljs-number">1</span>&#125;;</span><br><span class="line">p[++tot]=(point)&#123;x-r-eps,y+r+eps,<span class="hljs-number">-1</span>&#125;;</span><br><span class="line">p[++tot]=(point)&#123;x+r+eps,y-r-eps,<span class="hljs-number">-1</span>&#125;;</span><br><span class="line">p[++tot]=(point)&#123;x+r+eps,y+r+eps,<span class="hljs-number">1</span>&#125;;</span><br><span class="line">o[++len]=y-r-eps,o[++len]=y+r+eps;</span><br><span class="line">&#125;</span><br><span class="line">sort(p+<span class="hljs-number">1</span>,p+tot+<span class="hljs-number">1</span>);sort(o+<span class="hljs-number">1</span>,o+len+<span class="hljs-number">1</span>);len=unique(o+<span class="hljs-number">1</span>,o+len+<span class="hljs-number">1</span>)-o<span class="hljs-number">-1</span>;</span><br><span class="line">ll ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=tot;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> Y=lower_bound(o+<span class="hljs-number">1</span>,o+len+<span class="hljs-number">1</span>,p[i].y)-o;</span><br><span class="line"><span class="hljs-keyword">if</span>(p[i].opt)modify(Y,p[i].opt);</span><br><span class="line"><span class="hljs-keyword">else</span> ans+=query(Y)&gt;<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="hljs-number">1l</span>l*ans*c+<span class="hljs-number">1l</span>l*jd*a;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">sort(f+<span class="hljs-number">1</span>,f+n+<span class="hljs-number">1</span>,cmp);<span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)g[f[i]]=i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(f[i]!=i)</span><br><span class="line">f[g[i]]=f[i],g[f[i]]=g[i],num++;</span><br><span class="line">ll ans2=ans+<span class="hljs-number">1l</span>l*(jd-num)*(b-a);</span><br><span class="line"><span class="hljs-keyword">if</span>(ans&gt;ans2)swap(ans,ans2);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>,ans,ans2);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">undef</span> mp</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3085&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Loj&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="dp" scheme="https://blog.mle-world.cn/tags/dp/"/>
    
      <category term="计算几何" scheme="https://blog.mle-world.cn/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>[GXOI/GZOI2019]宝牌一大堆</title>
    <link href="https://blog.mle-world.cn/gxoi-gzoi2019-%E5%AE%9D%E7%89%8C%E4%B8%80%E5%A4%A7%E5%A0%86/"/>
    <id>https://blog.mle-world.cn/gxoi-gzoi2019-宝牌一大堆/</id>
    <published>2019-04-28T09:27:10.000Z</published>
    <updated>2019-04-28T10:04:41.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://loj.ac/problem/3084" target="_blank" rel="noopener">Loj</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑如果将杠子看成刻子+1,那么就只有三种和牌的方式:</p><ol><li>$3*4+2$</li><li>七对子</li><li>国士无双</li></ol><p>下面用$val$表示对应的收益,$chk$表示更新:<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">val</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l*c[cnt[x]][y]*(flag[x]?bin[y]:<span class="hljs-number">1</span>);&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chk</span><span class="hljs-params">(ll &amp;x,ll y)</span></span>&#123;x=x&gt;y?x:y;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="七对子"><a href="#七对子" class="headerlink" title="七对子"></a>七对子</h3><p>我们不妨设$f_{i,j}$表示枚举完了前$i$种牌,选出来了$j$个雀子的最大收益.<br>很容易转移:</p><p>$f_{i+1,j}=max(f_{i+1,j},f_{i,j}*val)$<br>然后答案就是$f_{34,7}$<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve2</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll dp[<span class="hljs-number">35</span>][<span class="hljs-number">8</span>];<span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">34</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">7</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">chk(dp[i+<span class="hljs-number">1</span>][j],dp[i][j]);</span><br><span class="line"><span class="hljs-keyword">if</span>(j&lt;<span class="hljs-number">7</span>)chk(dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>],<span class="hljs-number">1l</span>l*dp[i][j]*val(i+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> dp[<span class="hljs-number">34</span>][<span class="hljs-number">7</span>]*<span class="hljs-number">7l</span>l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="国士无双"><a href="#国士无双" class="headerlink" title="国士无双"></a>国士无双</h3><p>发现只有给出的13种牌有用,那么接着$dp$!<br>设$dp_{i,j}$表示前$i$种牌(钦定的13种),现在有$j$张牌.<br>容易转移:<br>$dp_{i+1,j+1}=dp_{i,j}*val$<br>$dp_{i+1,j+2}$<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve3</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll dp[<span class="hljs-number">14</span>][<span class="hljs-number">15</span>];<span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">13</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">14</span>;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(dp[i][j])</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2</span> &amp;&amp; k&lt;=cnt[scholar[i+<span class="hljs-number">1</span>]];k++)</span><br><span class="line">chk(dp[i+<span class="hljs-number">1</span>][j+k],<span class="hljs-number">1l</span>l*dp[i][j]*val(scholar[i+<span class="hljs-number">1</span>],k));</span><br><span class="line"><span class="hljs-keyword">return</span> dp[<span class="hljs-number">13</span>][<span class="hljs-number">14</span>]*<span class="hljs-number">13</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-2"><a href="#3-4-2" class="headerlink" title="3*4+2"></a>3*4+2</h3><p>如果做过<code>麻将</code>那么你就会做出来这道题!<br>设$f_{i,j,k,a,b}$表示枚举了前$i$种牌,钦定以$i-1$开头的顺子有$j$个,以$i$开头的顺子有$k$个,已经组成了$a$个面子,$b$表示有无雀子.<br>然后一顿乱转移就是了.<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve1</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll f[<span class="hljs-number">35</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">5</span>][<span class="hljs-number">2</span>];<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">34</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(!j || (i&gt;<span class="hljs-number">7</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">1</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">3</span>;k++)</span><br><span class="line"><span class="hljs-keyword">if</span>(!k || (i&gt;<span class="hljs-number">7</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">8</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-keyword">if</span>(cnt[i+<span class="hljs-number">1</span>]&gt;=j+k)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=j+k;a&lt;=<span class="hljs-number">4</span>;a++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;b&lt;<span class="hljs-number">2</span>;b++)</span><br><span class="line"><span class="hljs-keyword">if</span>(f[i][j][k][a][b])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>;c&lt;=<span class="hljs-number">2</span> &amp;&amp; j+k+c&lt;=cnt[i+<span class="hljs-number">1</span>] &amp;&amp; a+c&lt;=<span class="hljs-number">4</span>;c++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d=<span class="hljs-number">0</span>;j+k+c+d*<span class="hljs-number">3</span>&lt;=cnt[i+<span class="hljs-number">1</span>] &amp;&amp; a+c+d&lt;=<span class="hljs-number">4</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> use=j+k+c+d*<span class="hljs-number">3</span>;<span class="hljs-comment">//d是刻子.</span></span><br><span class="line">chk(f[i+<span class="hljs-number">1</span>][k][c][a+c+d][b],<span class="hljs-number">1l</span>l*f[i][j][k][a][b]*val(i+<span class="hljs-number">1</span>,use));</span><br><span class="line"><span class="hljs-keyword">if</span>(!b &amp;&amp; use+<span class="hljs-number">2</span>&lt;=cnt[i+<span class="hljs-number">1</span>])chk(f[i+<span class="hljs-number">1</span>][k][c][a+c+d][<span class="hljs-number">1</span>],<span class="hljs-number">1l</span>l*f[i][j][k][a][b]*val(i+<span class="hljs-number">1</span>,use+<span class="hljs-number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f[<span class="hljs-number">34</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">4</span>][<span class="hljs-number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><del>为什么没有杠子呢?</del><br>因为选杠子一定不优啊!</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> c[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>],bin[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1010</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> cnt[N],flag[N];</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">val</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1l</span>l*c[cnt[x]][y]*(flag[x]?bin[y]:<span class="hljs-number">1</span>);&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chk</span><span class="hljs-params">(ll &amp;x,ll y)</span></span>&#123;x=x&gt;y?x:y;&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve1</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll f[<span class="hljs-number">35</span>][<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">5</span>][<span class="hljs-number">2</span>];<span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">34</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(!j || (i&gt;<span class="hljs-number">7</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">1</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">3</span>;k++)</span><br><span class="line"><span class="hljs-keyword">if</span>(!k || (i&gt;<span class="hljs-number">7</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">8</span> &amp;&amp; (i<span class="hljs-number">-7</span>)%<span class="hljs-number">9</span>!=<span class="hljs-number">0</span>))</span><br><span class="line"><span class="hljs-keyword">if</span>(cnt[i+<span class="hljs-number">1</span>]&gt;=j+k)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=j+k;a&lt;=<span class="hljs-number">4</span>;a++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;b&lt;<span class="hljs-number">2</span>;b++)</span><br><span class="line"><span class="hljs-keyword">if</span>(f[i][j][k][a][b])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">0</span>;c&lt;=<span class="hljs-number">2</span> &amp;&amp; j+k+c&lt;=cnt[i+<span class="hljs-number">1</span>] &amp;&amp; a+c&lt;=<span class="hljs-number">4</span>;c++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d=<span class="hljs-number">0</span>;j+k+c+d*<span class="hljs-number">3</span>&lt;=cnt[i+<span class="hljs-number">1</span>] &amp;&amp; a+c+d&lt;=<span class="hljs-number">4</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> use=j+k+c+d*<span class="hljs-number">3</span>;<span class="hljs-comment">//d是刻子.</span></span><br><span class="line">chk(f[i+<span class="hljs-number">1</span>][k][c][a+c+d][b],<span class="hljs-number">1l</span>l*f[i][j][k][a][b]*val(i+<span class="hljs-number">1</span>,use));</span><br><span class="line"><span class="hljs-keyword">if</span>(!b &amp;&amp; use+<span class="hljs-number">2</span>&lt;=cnt[i+<span class="hljs-number">1</span>])chk(f[i+<span class="hljs-number">1</span>][k][c][a+c+d][<span class="hljs-number">1</span>],<span class="hljs-number">1l</span>l*f[i][j][k][a][b]*val(i+<span class="hljs-number">1</span>,use+<span class="hljs-number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f[<span class="hljs-number">34</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">4</span>][<span class="hljs-number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve2</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll dp[<span class="hljs-number">35</span>][<span class="hljs-number">8</span>];<span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">34</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">7</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">chk(dp[i+<span class="hljs-number">1</span>][j],dp[i][j]);</span><br><span class="line"><span class="hljs-keyword">if</span>(j&lt;<span class="hljs-number">7</span>)chk(dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>],<span class="hljs-number">1l</span>l*dp[i][j]*val(i+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> dp[<span class="hljs-number">34</span>][<span class="hljs-number">7</span>]*<span class="hljs-number">7l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> scholar[<span class="hljs-number">14</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">34</span>&#125;;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">solve3</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">static</span> ll dp[<span class="hljs-number">14</span>][<span class="hljs-number">15</span>];<span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">13</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">14</span>;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(dp[i][j])</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">2</span> &amp;&amp; k&lt;=cnt[scholar[i+<span class="hljs-number">1</span>]];k++)</span><br><span class="line">chk(dp[i+<span class="hljs-number">1</span>][j+k],<span class="hljs-number">1l</span>l*dp[i][j]*val(scholar[i+<span class="hljs-number">1</span>],k));</span><br><span class="line"><span class="hljs-keyword">return</span> dp[<span class="hljs-number">13</span>][<span class="hljs-number">14</span>]*<span class="hljs-number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>((ch&lt;<span class="hljs-string">'0'</span> || ch&gt;<span class="hljs-string">'9'</span>) &amp;&amp; (ch!=<span class="hljs-string">'E'</span> &amp;&amp; ch!=<span class="hljs-string">'S'</span> &amp;&amp; ch!=<span class="hljs-string">'W'</span> &amp;&amp; ch!=<span class="hljs-string">'N'</span> &amp;&amp; ch!=<span class="hljs-string">'Z'</span> &amp;&amp; ch!=<span class="hljs-string">'F'</span> &amp;&amp; ch!=<span class="hljs-string">'B'</span>))ch=getchar();</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'0'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'E'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'S'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'W'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'N'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'Z'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'F'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'B'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> num=ch-<span class="hljs-string">'0'</span>;ch=getchar();</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'m'</span>)num+=<span class="hljs-number">25</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'p'</span>)num+=<span class="hljs-number">7</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'s'</span>)num+=<span class="hljs-number">16</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i][<span class="hljs-number">0</span>]=c[i][i]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)</span><br><span class="line">c[i][j]=c[i<span class="hljs-number">-1</span>][j]+c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">freopen(<span class="hljs-string">"doraippai.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"doraippai.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> T=gi();init();</span><br><span class="line"><span class="hljs-keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">34</span>;i++)cnt[i]=<span class="hljs-number">4</span>,flag[i]=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> x;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;x=read();<span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">break</span>;cnt[x]--;&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;x=read();<span class="hljs-keyword">if</span>(!x)<span class="hljs-keyword">break</span>;flag[x]=<span class="hljs-number">1</span>;&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,max(solve1(),max(solve2(),solve3())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3084&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Loj&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="dp" scheme="https://blog.mle-world.cn/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[GXOI/GZOI2019]与或和</title>
    <link href="https://blog.mle-world.cn/gxoi-gzoi2019-%E4%B8%8E%E6%88%96%E5%92%8C/"/>
    <id>https://blog.mle-world.cn/gxoi-gzoi2019-与或和/</id>
    <published>2019-04-28T09:20:55.000Z</published>
    <updated>2019-04-28T09:26:43.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://loj.ac/problem/3083" target="_blank" rel="noopener">Loj</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑二进制拆位,那么现在对于每一位矩阵只可能是$0$或$1$,具有贡献的就是$1$.</p><ol><li>$\&amp;$运算如果要是$1$,只能够全是$1$.</li><li>$|$运算如果要是有一个$1$,那么就是$1$.</li></ol><p>发现这个$|$不好算,那么考虑它的逆命题:</p><ul><li>如果全是$0$,那么就是$0$.</li></ul><p>发现这是一个相同的过程,接下来就是求全$0/1$的过程了.<br>首先算每一个点能够向上扩展多少,枚举$(i,j)$作为矩形的右下角,对于前面的元素维护一个向上扩展的单调栈,直接算贡献就好了.<br>emm,注意以$(i,j)$为右下角的矩阵个数为$i*j$.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=g<span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;<span class="hljs-built_in">string</span>.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;<span class="hljs-built_in">queue</span>&gt;</span><br><span class="line">#include&lt;<span class="hljs-built_in">set</span>&gt;</span><br><span class="line">#include&lt;<span class="hljs-built_in">map</span>&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1010</span>,Mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,a[N][N],A[N][N],c[N][N],sta[N],top;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">freopen(<span class="hljs-string">"andorsum.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"andorsum.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line">n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">a[i][j]=gi();</span><br><span class="line"><span class="hljs-keyword">int</span> val=<span class="hljs-number">1</span>;ll ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">31</span>;k++,val&lt;&lt;=<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">A[i][j]=(a[i][j]&gt;&gt;k)&amp;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(A[i][j])c[i][j]=c[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> c[i][j]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">top=<span class="hljs-number">0</span>;ll sum=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+c[i][j])%Mod;</span><br><span class="line"><span class="hljs-keyword">while</span>(top &amp;&amp; c[i][sta[top]]&gt;=c[i][j])</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum<span class="hljs-number">-1l</span>l*(c[i][sta[top]]-c[i][j])*(sta[top]-sta[top<span class="hljs-number">-1</span>])+Mod)%Mod;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=j;</span><br><span class="line">ans=(ans+<span class="hljs-number">1l</span>l*sum*val%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,ans);</span><br><span class="line">val=<span class="hljs-number">1</span>;ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">31</span>;k++,val&lt;&lt;=<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">A[i][j]=((a[i][j]&gt;&gt;k)&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(A[i][j])c[i][j]=c[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> c[i][j]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">top=<span class="hljs-number">0</span>;ll sum=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+c[i][j])%Mod;</span><br><span class="line"><span class="hljs-keyword">while</span>(top &amp;&amp; c[i][sta[top]]&gt;=c[i][j])</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum<span class="hljs-number">-1l</span>l*(c[i][sta[top]]-c[i][j])*(sta[top]-sta[top<span class="hljs-number">-1</span>])+Mod)%Mod;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=j;</span><br><span class="line">ans=(ans+<span class="hljs-number">1l</span>l*(i*j-sum)*val%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">etchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1010</span>,Mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,a[N][N],A[N][N],c[N][N],sta[N],top;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">file(<span class="hljs-string">"andorsum"</span>);</span><br><span class="line">n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">a[i][j]=gi();</span><br><span class="line"><span class="hljs-keyword">int</span> val=<span class="hljs-number">1</span>;ll ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">31</span>;k++,val&lt;&lt;=<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">A[i][j]=(a[i][j]&gt;&gt;k)&amp;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(A[i][j])c[i][j]=c[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> c[i][j]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">top=<span class="hljs-number">0</span>;ll sum=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+c[i][j])%Mod;</span><br><span class="line"><span class="hljs-keyword">while</span>(top &amp;&amp; c[i][sta[top]]&gt;=c[i][j])</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum<span class="hljs-number">-1l</span>l*(c[i][sta[top]]-c[i][j])*(sta[top]-sta[top<span class="hljs-number">-1</span>])+Mod)%Mod;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=j;</span><br><span class="line">ans=(ans+<span class="hljs-number">1l</span>l*sum*val%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld "</span>,ans);</span><br><span class="line">val=<span class="hljs-number">1</span>;ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">31</span>;k++,val&lt;&lt;=<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">A[i][j]=((a[i][j]&gt;&gt;k)&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(A[i][j])c[i][j]=c[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> c[i][j]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">top=<span class="hljs-number">0</span>;ll sum=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+c[i][j])%Mod;</span><br><span class="line"><span class="hljs-keyword">while</span>(top &amp;&amp; c[i][sta[top]]&gt;=c[i][j])</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum<span class="hljs-number">-1l</span>l*(c[i][sta[top]]-c[i][j])*(sta[top]-sta[top<span class="hljs-number">-1</span>])+Mod)%Mod;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line">sta[++top]=j;</span><br><span class="line">ans=(ans+<span class="hljs-number">1l</span>l*(i*j-sum)*val%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/3083&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Loj&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="单调栈" scheme="https://blog.mle-world.cn/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="二进制" scheme="https://blog.mle-world.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>CF1154G Minimum Possible LCM</title>
    <link href="https://blog.mle-world.cn/cf1154g-minimum-possible-lcm/"/>
    <id>https://blog.mle-world.cn/cf1154g-minimum-possible-lcm/</id>
    <published>2019-04-25T02:18:18.000Z</published>
    <updated>2019-04-27T23:45:36.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="http://codeforces.com/problemset/problem/1154/G" target="_blank" rel="noopener">CodeForces</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定一个长度为 $n$ 的序列 $a$，找出两个数，最小化他们的最小公倍数</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行是一个整数 $n$<br>下面一行 $n$ 个整数描述这个序列</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出一行两个整数代表这两个数在序列中的位置。如果有多解则任意输出一个即可。</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>神仙题啊!</p><p>考虑$lcm$怎么算?$lcm$=$i$*$j$/$gcd$</p><p>发现这个式子里面的$gcd$的范围可以枚举,那么直接枚举$gcd$,拿最小的两个出来算$lcm$就好了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000010</span>,Max=<span class="hljs-number">1e7</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> vis[Max+<span class="hljs-number">10</span>],a[N],n,ans1,ans2;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">n=gi();ans=<span class="hljs-number">1e18</span>+<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=gi();</span><br><span class="line"><span class="hljs-keyword">if</span>(!vis[a[i]])vis[a[i]]=i;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ans&gt;a[i])&#123;ans=a[i];ans1=i;ans2=vis[a[i]];&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=Max;i++)</span><br><span class="line">&#123;</span><br><span class="line">re ll find1=<span class="hljs-number">0</span>,find2=<span class="hljs-number">0</span>,where1,where2;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> j=i;j&lt;=Max;j+=i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!vis[j])<span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(!find1)&#123;find1=j;where1=vis[j];<span class="hljs-keyword">continue</span>;&#125;</span><br><span class="line">find2=j;where2=vis[j];</span><br><span class="line">re ll lcm=<span class="hljs-number">1l</span>l*find1/i*find2;</span><br><span class="line"><span class="hljs-keyword">if</span>(lcm&lt;ans)&#123;ans=lcm;ans1=where1,ans2=where2;&#125;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(ans1&gt;ans2)swap(ans1,ans2);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>,ans1,ans2);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/1154/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeForces&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;p&gt;给定一个长度为 $n$ 的序列 $a$，找出两个数，最小化他们的最小公倍数&lt;/p&gt;
&lt;h3 id=&quot;Input&quot;&gt;&lt;a href=&quot;#Input&quot; class=&quot;headerlink&quot; title=&quot;Input&quot;&gt;&lt;/a&gt;Input&lt;/h3&gt;&lt;p&gt;第一行是一个整数 $n$&lt;br&gt;下面一行 $n$ 个整数描述这个序列&lt;/p&gt;
&lt;h3 id=&quot;Output&quot;&gt;&lt;a href=&quot;#Output&quot; class=&quot;headerlink&quot; title=&quot;Output&quot;&gt;&lt;/a&gt;Output&lt;/h3&gt;&lt;p&gt;输出一行两个整数代表这两个数在序列中的位置。如果有多解则任意输出一个即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="数学" scheme="https://blog.mle-world.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ5312 - 冒险</title>
    <link href="https://blog.mle-world.cn/bzoj5312-%E5%86%92%E9%99%A9/"/>
    <id>https://blog.mle-world.cn/bzoj5312-冒险/</id>
    <published>2019-03-08T12:06:05.000Z</published>
    <updated>2019-03-08T12:13:12.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=5312" target="_blank" rel="noopener">BZOJ</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>emmm,现在考虑一下怎么区间或和区间与.<br>考虑如果一段区间的贡献没有什么用,显然不需要搞.<br>考虑如果|的全是贡献的话,那么显然可以直接搞,就相当于是区间加法.<br>如果&amp;的也是全是的,那么显然也可以直接搞,相当于是区间减法.<br>然后就把这道题目转换成了区间+-然后求mx了.<br>嗯嗯嗯嗯嗯,就是线段树板子了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">200010</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> And,Or,tag,mx;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> a[N],n,m;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_and</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_or</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    n=gi();m=gi();</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)a[i]=gi();</span><br><span class="line">    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);</span><br><span class="line">    <span class="hljs-keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> opt=gi(),l=gi(),r=gi();</span><br><span class="line">        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> x=gi();</span><br><span class="line">            modify_and(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> x=gi();</span><br><span class="line">            modify_or(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    t[o].And=t[o&lt;&lt;<span class="hljs-number">1</span>].And&amp;t[o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].And;</span><br><span class="line">    t[o].Or=t[o&lt;&lt;<span class="hljs-number">1</span>].Or|t[o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].Or;</span><br><span class="line">    t[o].mx=max(t[o&lt;&lt;<span class="hljs-number">1</span>].mx,t[o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l==r)&#123;t[o].mx=t[o].And=t[o].Or=a[l];<span class="hljs-keyword">return</span>;&#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line">    build(o&lt;&lt;<span class="hljs-number">1</span>,l,mid);build(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);</span><br><span class="line">    pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> v)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    t[o].tag+=v;t[o].And+=v;t[o].Or+=v;t[o].mx+=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(t[o].tag)</span><br><span class="line">    &#123;</span><br><span class="line">        add(o&lt;&lt;<span class="hljs-number">1</span>,t[o].tag);</span><br><span class="line">        add(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,t[o].tag);</span><br><span class="line">        t[o].tag=<span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_and</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> posl,<span class="hljs-keyword">int</span> posr,<span class="hljs-keyword">int</span> k)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l&lt;r)pushdown(o);</span><br><span class="line">    <span class="hljs-keyword">if</span>((t[o].Or&amp;k)==t[o].Or)<span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>((posl&lt;=l &amp;&amp; r&lt;=posr) &amp;&amp; (t[o].And&amp;k)-t[o].And==(t[o].Or&amp;k)-t[o].Or)&#123;add(o,(t[o].And&amp;k)-t[o].And);<span class="hljs-keyword">return</span>;&#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(posr&lt;=mid)modify_and(o&lt;&lt;<span class="hljs-number">1</span>,l,mid,posl,posr,k);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(posl&gt;mid)modify_and(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,posl,posr,k);</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        modify_and(o&lt;&lt;<span class="hljs-number">1</span>,l,mid,posl,mid,k);</span><br><span class="line">        modify_and(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,mid+<span class="hljs-number">1</span>,posr,k);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify_or</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> posl,<span class="hljs-keyword">int</span> posr,<span class="hljs-keyword">int</span> k)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l&lt;r)pushdown(o);</span><br><span class="line">    <span class="hljs-keyword">if</span>((t[o].And|k)==t[o].And)<span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>((posl&lt;=l &amp;&amp; r&lt;=posr) &amp;&amp; (t[o].And|k)-t[o].And==(t[o].Or|k)-t[o].Or)&#123;add(o,(t[o].Or|k)-t[o].Or);<span class="hljs-keyword">return</span>;&#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(posr&lt;=mid)modify_or(o&lt;&lt;<span class="hljs-number">1</span>,l,mid,posl,posr,k);</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(posl&gt;mid)modify_or(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,posl,posr,k);</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        modify_or(o&lt;&lt;<span class="hljs-number">1</span>,l,mid,posl,mid,k);</span><br><span class="line">        modify_or(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,mid+<span class="hljs-number">1</span>,posr,k);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> posl,<span class="hljs-keyword">int</span> posr)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l!=r)pushdown(o);</span><br><span class="line">    <span class="hljs-keyword">if</span>(posl&lt;=l &amp;&amp; r&lt;=posr)<span class="hljs-keyword">return</span> t[o].mx;</span><br><span class="line">    <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,res=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(posl&lt;=mid)res=max(res,query(o&lt;&lt;<span class="hljs-number">1</span>,l,mid,posl,posr));</span><br><span class="line">    <span class="hljs-keyword">if</span>(posr&gt;mid)res=max(res,query(o&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,posl,posr));</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">Kaiser终于成为冒险协会的一员，这次冒险协会派他去冒险，他来到一处古墓，却被大门上的守护神挡住了去路，守护神给出了一个问题，</span></span><br><span class="line"><span class="hljs-comment">只有答对了问题才能进入，守护神给出了一个自然数序列a,每次有一下三种操作。</span></span><br><span class="line"><span class="hljs-comment">1，给出l,r,x，将序列l,r之间的所有数都 and x</span></span><br><span class="line"><span class="hljs-comment">2，给出l,r,x，将序列l,r之间的所有数都 or x</span></span><br><span class="line"><span class="hljs-comment">3，给出l,r，询问l,r之间的最大值</span></span><br><span class="line"><span class="hljs-comment">第一行包含两个整数 n,m 接下来一行包含 n 个整数, 表示a序列，接下来 m 行, 每行描述了一个操作.</span></span><br><span class="line"><span class="hljs-comment">2&lt;=n&lt;=2e5 2&lt;=q&lt;=2e5,0&lt;=ai&lt;=2^20.</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=5312&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="线段树" scheme="https://blog.mle-world.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces802C Heidi and Library(hard)</title>
    <link href="https://blog.mle-world.cn/codeforces802c-heidi-and-library-hard/"/>
    <id>https://blog.mle-world.cn/codeforces802c-heidi-and-library-hard/</id>
    <published>2019-03-07T07:26:43.000Z</published>
    <updated>2019-03-07T07:36:47.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="http://codeforces.com/problemset/problem/802/C" target="_blank" rel="noopener">CodeForces</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>有$n$天和一个容量为$k$的书架,每天需要第$a_i$本书,买$i$这本书的代价是$c_i$,求满足每天条件的最小代价.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>显然如果第$i$天需要$a_i$,那么$a_i$必须要在书架上面.<br>考虑像餐巾计划一样把每一天拆成2个点,分别表示拥有的和需要的.<br>显然当前这一天一定是连$(i,i+n,1,-Inf)$表示必须选.<br>后面的随便连一下判断需不需要再买书就好了.<br>最后跑k次费用流的费用就是答案.<br>注意要把n*Inf的代价加上.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Inf=<span class="hljs-number">1e7</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> to,nxt,flow,cost;</span><br><span class="line">&#125;e[<span class="hljs-number">100010</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> front[<span class="hljs-number">5010</span>],n,s,t,cnt=<span class="hljs-number">1</span>,dis[<span class="hljs-number">5010</span>],vis[<span class="hljs-number">5010</span>],fa[<span class="hljs-number">5010</span>],from[<span class="hljs-number">5010</span>],a[<span class="hljs-number">100010</span>],c[<span class="hljs-number">100010</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> flow,<span class="hljs-keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">e[++cnt]=(node)&#123;v,front[u],flow,cost&#125;;front[u]=cnt;</span><br><span class="line">e[++cnt]=(node)&#123;u,front[v],<span class="hljs-number">0</span>,-cost&#125;;front[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> flow,k,cost;</span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;Q;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SPFA</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=s;i&lt;=t;i++)dis[i]=Inf;</span><br><span class="line">Q.push(s);</span><br><span class="line">dis[s]=<span class="hljs-number">0</span>;vis[s]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(!Q.empty())&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=Q.front();Q.pop();vis[u]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=front[u];i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=e[i].to;</span><br><span class="line"><span class="hljs-keyword">if</span>(e[i].flow &amp;&amp; dis[v]&gt;dis[u]+e[i].cost)&#123;</span><br><span class="line">dis[v]=dis[u]+e[i].cost;fa[v]=u;</span><br><span class="line">from[v]=i;</span><br><span class="line"><span class="hljs-keyword">if</span>(!vis[v])&#123;</span><br><span class="line">vis[v]=<span class="hljs-number">1</span>;Q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(dis[t]==Inf)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">flow++;cost=min(cost,cost+dis[t]);</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=t;i!=s;i=fa[i])&#123;</span><br><span class="line">e[from[i]].flow--;e[from[i]^<span class="hljs-number">1</span>].flow++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">McMf</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(k--)SPFA();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">n=gi();k=gi();</span><br><span class="line">t=n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)a[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)c[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Add(s,i,<span class="hljs-number">1</span>,c[a[i]]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Add(i,i+n,<span class="hljs-number">1</span>,-Inf);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Add(i+n,t,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">Add(i+n,j,<span class="hljs-number">1</span>,a[i]==a[j]?<span class="hljs-number">0</span>:c[a[j]]);</span><br><span class="line">&#125;</span><br><span class="line">cost+=<span class="hljs-number">1l</span>l*n*Inf;k=min(k,n);</span><br><span class="line">McMf();</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,cost);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/802/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeForces&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;有$n$天和一个容量为$k$的书架,每天需要第$a_i$本书,买$i$这本书的代价是$c_i$,求满足每天条件的最小代价.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="网络流" scheme="https://blog.mle-world.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="建模" scheme="https://blog.mle-world.cn/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>[HAOI2011]防线建设</title>
    <link href="https://blog.mle-world.cn/haoi2011-%E9%98%B2%E7%BA%BF%E5%BB%BA%E8%AE%BE/"/>
    <id>https://blog.mle-world.cn/haoi2011-防线建设/</id>
    <published>2019-03-07T06:45:12.000Z</published>
    <updated>2019-03-07T07:08:11.319Z</updated>
    
    <content type="html"><![CDATA[<p>$\texttt{stO}​$ $\color{red}h \color{black}{yjhyj​}$ $\texttt{Orz}​$</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=2300" target="_blank" rel="noopener">BZOJ</a></p><p>然而是权限题</p><p><a href="https://www.luogu.org/problemnew/show/P2521" target="_blank" rel="noopener">洛谷</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>不会凸包的出门右转→</p><p>考虑我们不会删点的动态凸包,但是这道题目只有删点,所以删点=加点!</p><p>那么怎么动态维护可以加点的凸包呢?</p><p>很显然每加入一个然后删除一些没有用的点就可以了.</p><p>这个东西平衡树查一下前驱就可以实现.</p><p>set大法好!</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">200010</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> P &amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> x&lt;b.x || (x==b.x &amp;&amp; y&lt;b.y);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> P &amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">        &#125;</span><br><span class="line">    P <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> P &amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> (P)&#123;x-b.x,y-b.y&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;city[N];</span><br><span class="line"><span class="hljs-built_in">set</span>&lt;P&gt;t;</span><br><span class="line"><span class="hljs-keyword">double</span> now,ans[N];</span><br><span class="line"><span class="hljs-keyword">int</span> del[N],tot,T,ask[N],n,x,y,mark[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dis</span><span class="hljs-params">(P a,P b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((<span class="hljs-keyword">double</span>)(a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(P &amp;x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">set</span>&lt;P&gt;::iterator r=t.lower_bound(x),l=r,tmp;</span><br><span class="line">    l--;</span><br><span class="line">    <span class="hljs-keyword">if</span>((*r-*l)*(x-*l)&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;</span><br><span class="line">    now-=dis(*l,*r);</span><br><span class="line">    t.insert(x);</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=r;r++;</span><br><span class="line">        <span class="hljs-keyword">if</span>(r==t.end())<span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>((*r-x)*(*tmp-x)&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;</span><br><span class="line">        now-=dis(*tmp,*r);</span><br><span class="line">        t.erase(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(l!=t.begin())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=l;l--;</span><br><span class="line">        <span class="hljs-keyword">if</span>((*tmp-x)*(*l-x)&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;</span><br><span class="line">        now-=dis(*tmp,*l);</span><br><span class="line">        t.erase(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    t.insert(x);</span><br><span class="line">    l=r=t.find(x);</span><br><span class="line">    l--;r++;</span><br><span class="line">    now+=dis(*l,x)+dis(x,*r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">    n=gi();x=gi(),y=gi();</span><br><span class="line">    t.insert((P)&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);</span><br><span class="line">    t.insert((P)&#123;n,<span class="hljs-number">0</span>&#125;);</span><br><span class="line">    P cap=(P)&#123;x,y&#125;;</span><br><span class="line">    t.insert(cap);</span><br><span class="line">    now+=dis((P)&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,cap);</span><br><span class="line">    now+=dis((P)&#123;n,<span class="hljs-number">0</span>&#125;,cap);</span><br><span class="line">    <span class="hljs-keyword">int</span> m=gi();</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> a=gi(),b=gi();</span><br><span class="line">        city[i]=(P)&#123;a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">int</span> q=gi();</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> opt=gi();</span><br><span class="line">        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">int</span> x=gi();del[++tot]=x,mark[x]=<span class="hljs-number">1</span>;&#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> ask[++T]=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="hljs-keyword">if</span>(!mark[i])insert(city[i]);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=T;i&gt;=<span class="hljs-number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(tot&gt;ask[i])</span><br><span class="line">        &#123;</span><br><span class="line">            insert(city[del[tot]]);</span><br><span class="line">            tot--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=T;i++)</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>,ans[i]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$\texttt{stO}​$ $\color{red}h \color{black}{yjhyj​}$ $\texttt{Orz}​$&lt;/p&gt;
&lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=2300&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然而是权限题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2521&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="凸包" scheme="https://blog.mle-world.cn/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="动态凸包" scheme="https://blog.mle-world.cn/tags/%E5%8A%A8%E6%80%81%E5%87%B8%E5%8C%85/"/>
    
      <category term="计算几何" scheme="https://blog.mle-world.cn/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.1] 圈奶牛Fencing the Cows</title>
    <link href="https://blog.mle-world.cn/usaco5-1-%E5%9C%88%E5%A5%B6%E7%89%9Bfencing-the-cows/"/>
    <id>https://blog.mle-world.cn/usaco5-1-圈奶牛fencing-the-cows/</id>
    <published>2019-03-05T14:07:19.000Z</published>
    <updated>2019-03-07T06:13:04.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://www.luogu.org/problemnew/show/P2742" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这里主要介绍一下怎么写Andrew求凸包.</p><p>考虑我们按照 $x,y$ 的顺序排序,发现左下角和右上角的一定在凸包里面.</p><p>那么按照一般性的凸包求法然后叉积判一下就好了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10010</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">double</span> x,y;</span><br><span class="line">node <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> node&amp;b)<span class="hljs-keyword">const</span>&#123;<span class="hljs-keyword">return</span> (node)&#123;x-b.x,y-b.y&#125;;&#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="hljs-keyword">int</span> n,top,s[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a.x&lt;b.x || (a.x==b.x &amp;&amp; a.y&lt;b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(node a,node b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">length</span><span class="hljs-params">(node a,node b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf%lf"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,cmp);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(top&gt;<span class="hljs-number">1</span> &amp;&amp; cross(a[s[top]]-a[s[top<span class="hljs-number">-1</span>]],a[i]-a[s[top<span class="hljs-number">-1</span>]])&lt;=<span class="hljs-number">0</span>)top--;</span><br><span class="line">s[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> tmp=top;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(top&gt;tmp &amp;&amp; cross(a[s[top]]-a[s[top<span class="hljs-number">-1</span>]],a[i]-a[s[top<span class="hljs-number">-1</span>]])&lt;=<span class="hljs-number">0</span>)top--;</span><br><span class="line">s[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">double</span> Dis=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;top;i++)</span><br><span class="line">Dis+=length(a[s[i]],a[s[i+<span class="hljs-number">1</span>]]);</span><br><span class="line">Dis+=length(a[s[<span class="hljs-number">1</span>]],a[s[top]]);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>,Dis);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2742&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="凸包" scheme="https://blog.mle-world.cn/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="计算几何" scheme="https://blog.mle-world.cn/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3691 旅行</title>
    <link href="https://blog.mle-world.cn/bzoj3691-%E6%97%85%E8%A1%8C/"/>
    <id>https://blog.mle-world.cn/bzoj3691-旅行/</id>
    <published>2019-03-05T11:53:47.000Z</published>
    <updated>2019-03-05T11:57:37.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=3691" target="_blank" rel="noopener">BZOJ</a></p><p>然而是权限题</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑C是变化的,然后他那个第一个部分的计算和费用流是不是很像?</p><p>然后把后面的放在一起算,前面的算一下费用流.</p><p>因为最短路是单调的,所以费用流的增广是一个单峰.</p><p>然后就可以了,在这个上面二分一下就知道答案了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">510</span>,M=<span class="hljs-number">200010</span>,Inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n,m,s,t,MaxFlow,MinCost,Q,g[N][N],val[N],tot,sum[N];</span><br><span class="line"><span class="hljs-keyword">int</span> front[N],cnt,nxt[M&lt;&lt;<span class="hljs-number">1</span>],to[M&lt;&lt;<span class="hljs-number">1</span>],w[M&lt;&lt;<span class="hljs-number">1</span>],c[M&lt;&lt;<span class="hljs-number">1</span>],dis[N],vis[N],fa[N],from[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SPFA</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span> &gt;Q;<span class="hljs-keyword">while</span>(!Q.empty())Q.pop();</span><br><span class="line">Q.push(s);<span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">127</span>/<span class="hljs-number">2</span>,<span class="hljs-keyword">sizeof</span>(dis));vis[s]=<span class="hljs-number">1</span>;dis[s]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(!Q.empty())&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=Q.front();Q.pop();vis[u]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i!=<span class="hljs-number">-1</span>;i=nxt[i])&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(w[i] &amp;&amp; dis[v]&gt;dis[u]+c[i])&#123;</span><br><span class="line">dis[v]=dis[u]+c[i];from[v]=i;fa[v]=u;</span><br><span class="line"><span class="hljs-keyword">if</span>(!vis[v])&#123;</span><br><span class="line">vis[v]=<span class="hljs-number">1</span>;Q.push(v);</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> dis[t+<span class="hljs-number">1</span>]!=dis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> val,<span class="hljs-keyword">int</span> f)</span></span>&#123;to[cnt]=v;nxt[cnt]=front[u];front[u]=cnt;w[cnt]=val;c[cnt]=f;++cnt;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> val,<span class="hljs-keyword">int</span> f)</span></span>&#123;Add_edge(u,v,val,f);Add_edge(v,u,<span class="hljs-number">0</span>,-f);&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">memset</span>(front,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(front));cnt=<span class="hljs-number">0</span>;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Solve</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">while</span>(SPFA())&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> d=Inf;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t;i!=s;i=fa[i])d=min(d,w[from[i]]);</span><br><span class="line">MaxFlow+=d;MinCost+=d*dis[t];</span><br><span class="line">val[++tot]=d*dis[t];sum[tot]=sum[tot<span class="hljs-number">-1</span>]+val[tot];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=t;i!=s;i=fa[i])&#123;w[from[i]]-=d;w[from[i]^<span class="hljs-number">1</span>]+=d;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line"><span class="hljs-comment">//freopen("out.out","w",stdout);</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">init();</span><br><span class="line">n=gi();m=gi();Q=gi();s=<span class="hljs-number">0</span>;t=n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">memset</span>(g,<span class="hljs-number">127</span>/<span class="hljs-number">2</span>,<span class="hljs-keyword">sizeof</span>(g));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">g[i][i]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=gi(),v=gi(),w=gi();</span><br><span class="line">g[u][v]=min(g[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line">g[i][j]=min(g[i][j],g[i][k]+g[k][j]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="hljs-keyword">if</span>(i^j)</span><br><span class="line">Add(i,j+n,<span class="hljs-number">1</span>,g[i][j]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)Add(s,i,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),Add(i+n,t,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);</span><br><span class="line">Solve();</span><br><span class="line"><span class="hljs-keyword">while</span>(Q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> C=gi(),l=<span class="hljs-number">1</span>,r=tot,ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(val[mid]&gt;C)r=mid<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span>&#123;l=mid+<span class="hljs-number">1</span>;ans=mid;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,sum[ans]+(n-ans)*C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=3691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然而是权限题&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="网络流" scheme="https://blog.mle-world.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="二分" scheme="https://blog.mle-world.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ1149 PIGS</title>
    <link href="https://blog.mle-world.cn/poj1149-pigs/"/>
    <id>https://blog.mle-world.cn/poj1149-pigs/</id>
    <published>2019-03-05T07:35:21.000Z</published>
    <updated>2019-03-05T07:59:59.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="http://poj.org/problem?id=1149" target="_blank" rel="noopener">POJ</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>现在有 $m$ 个猪圈,分别有 $a_i$ 头猪.</p><p>有 $n$ 个人要买猪,在 $k$ 个猪圈里面选,最多买 $b$ 头猪.</p><p>问最多买多少头猪.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>发现这个数据范围很像网络流啊.</p><p>我们新建一个 $s$ , $t$ 节点.</p><p>把每一个人向 $t$ 节点连一个需求量,考虑每一个猪圈怎么解决:</p><p>我们想一下怎么转换模型,如果可以调换的话,相当于就是这些猪是一个整体对吧.</p><p>所以我们可以考虑把</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  mail: mleautomaton@foxmail.com</span></span><br><span class="line"><span class="hljs-comment">  author: MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">  This Code is made by MLEAutoMaton</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10010</span>,M=<span class="hljs-number">200010</span>,Inf=<span class="hljs-number">1e9</span>+<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> front[N],nxt[M&lt;&lt;<span class="hljs-number">1</span>],to[M&lt;&lt;<span class="hljs-number">1</span>],w[M&lt;&lt;<span class="hljs-number">1</span>],cnt=<span class="hljs-number">1</span>,s,t,dep[N],m,n,pig[N],bl[N],cur[N];</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;g[N];</span><br><span class="line"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;Q;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> val)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">to[++cnt]=v;nxt[cnt]=front[u];w[cnt]=val;front[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> val)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">Add_edge(u,v,val);</span><br><span class="line">Add_edge(v,u,<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(dep,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(dep));</span><br><span class="line">dep[s]=<span class="hljs-number">1</span>;Q.push(s);</span><br><span class="line"><span class="hljs-keyword">while</span>(!Q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=Q.front();Q.pop();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(w[i] &amp;&amp; !dep[v])</span><br><span class="line">&#123;</span><br><span class="line">dep[v]=dep[u]+<span class="hljs-number">1</span>;Q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> flow)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(u==t || !flow)<span class="hljs-keyword">return</span> flow;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp;i=cur[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(dep[v]==dep[u]+<span class="hljs-number">1</span> &amp;&amp; w[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> di=dfs(v,min(flow,w[i]));</span><br><span class="line"><span class="hljs-keyword">if</span>(di)</span><br><span class="line">&#123;</span><br><span class="line">w[i]-=di;w[i^<span class="hljs-number">1</span>]+=di;</span><br><span class="line"><span class="hljs-keyword">return</span> di;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Dinic</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> flow=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(bfs())</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=s;i&lt;=t;i++)cur[i]=front[i];</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-keyword">int</span> d=dfs(s,Inf))flow+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"out.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line"><span class="hljs-built_in">memset</span>(front,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(front));</span><br><span class="line">m=gi();n=gi();t=n+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)pig[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> k=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)</span><br><span class="line">g[i].push_back(gi());</span><br><span class="line">Add(i,t,gi());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;g[i].size();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=g[i][j];</span><br><span class="line"><span class="hljs-keyword">if</span>(!bl[v])</span><br><span class="line">&#123;</span><br><span class="line">bl[v]=i;</span><br><span class="line">Add(s,i,pig[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Add(bl[v],i,Inf);</span><br><span class="line">bl[v]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,Dinic());</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;现在有 $m$ 个猪圈,分别有 $a_i$ 头猪.&lt;/p&gt;
&lt;p&gt;有 $n$ 个人要买猪,在 $k$ 个猪圈里面选,最多买 $b$ 头猪.&lt;/p&gt;
&lt;p&gt;问最多买多少头猪.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="网络流" scheme="https://blog.mle-world.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="建模" scheme="https://blog.mle-world.cn/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>CodeChef Querying on a Grid</title>
    <link href="https://blog.mle-world.cn/codechef-querying-on-a-grid/"/>
    <id>https://blog.mle-world.cn/codechef-querying-on-a-grid/</id>
    <published>2019-03-05T00:01:31.000Z</published>
    <updated>2019-03-05T00:06:49.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://www.codechef.com/problems/QGRID" target="_blank" rel="noopener">CodeChef</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>给你一个m*n的网格图(m&lt;=3),有Q个询问:<br>opt=1,将(x1,y1)-&gt;(x2,y2)的最短路上的点权+c.<br>opt=2,求点(x,y)的点权.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>网格图的一个基本套路就是分治(蒯的).</p></blockquote><p>那么我们考虑分治,对于mid上面的3个点求一个最短路径树,那么现在最短路的长度就已知了.</p><p>然后再分治找路径就知道是路径了.</p><p>接着考虑修改,直接把这个修改改成子树修改就好了.</p><p>具体实现参考代码.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">gl</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">300010</span>,M=<span class="hljs-number">4</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> pair&lt;ll,<span class="hljs-keyword">int</span>&gt; pii;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;pii&gt;g[N];</span><br><span class="line"><span class="hljs-keyword">int</span> m,n,Q,tot,id[N][M];</span><br><span class="line">ll Max;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">ll dis[N],c[N];</span><br><span class="line"><span class="hljs-keyword">int</span> fa[N],dfn[N],low[N],Time;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;son[N];</span><br><span class="line"><span class="hljs-keyword">bool</span> vis[N];</span><br><span class="line">priority_queue&lt;pii,<span class="hljs-built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">dfn[u]=++Time;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v:son[u])dfs(v);</span><br><span class="line">low[u]=Time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll d)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">x=dfn[x];</span><br><span class="line"><span class="hljs-keyword">while</span>(x&lt;=Time)</span><br><span class="line">&#123;</span><br><span class="line">c[x]+=d;</span><br><span class="line">x+=lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">ll ret=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> tmp=x;</span><br><span class="line">tmp=low[x];<span class="hljs-keyword">while</span>(tmp)&#123;ret+=c[tmp];tmp-=lowbit(tmp);&#125;</span><br><span class="line">tmp=dfn[x]<span class="hljs-number">-1</span>;<span class="hljs-keyword">while</span>(tmp)&#123;ret-=c[tmp];tmp-=lowbit(tmp);&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> s)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">dis[i]=<span class="hljs-number">1e18</span>,vis[i]=<span class="hljs-literal">false</span>;</span><br><span class="line">dis[s]=<span class="hljs-number">0</span>;</span><br><span class="line">q.push(mp(<span class="hljs-number">0</span>,s));</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">pii now=q.top();q.pop();</span><br><span class="line"><span class="hljs-keyword">int</span> u=now.second;</span><br><span class="line"><span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(pii i:g[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=i.second;ll w=i.first;</span><br><span class="line"><span class="hljs-keyword">if</span>(v&lt;l || v&gt;r || dis[v]&lt;=dis[u]+w)<span class="hljs-keyword">continue</span>;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line">fa[v]=u;</span><br><span class="line">q.push(mp(dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(i!=s)son[fa[i]].push_back(i);</span><br><span class="line">dfs(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;t[<span class="hljs-number">20</span>][M];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> dep)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">t[dep][i].dijkstra(id[l][<span class="hljs-number">0</span>],id[r][m<span class="hljs-number">-1</span>],id[mid][i]);</span><br><span class="line"><span class="hljs-keyword">if</span>(l&lt;mid)build(l,mid<span class="hljs-number">-1</span>,dep+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(r&gt;mid)build(mid+<span class="hljs-number">1</span>,r,dep+<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> dep,<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">Max=min(Max,t[dep][i].dis[u]+t[dep][i].dis[v]);</span><br><span class="line"><span class="hljs-keyword">if</span>(u&lt;=id[mid][m<span class="hljs-number">-1</span>] &amp;&amp; v&gt;=id[mid][<span class="hljs-number">0</span>])<span class="hljs-keyword">return</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(v&lt;id[mid][<span class="hljs-number">0</span>])calc(l,mid<span class="hljs-number">-1</span>,dep+<span class="hljs-number">1</span>,u,v);</span><br><span class="line"><span class="hljs-keyword">else</span> calc(mid+<span class="hljs-number">1</span>,r,dep+<span class="hljs-number">1</span>,u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> dep,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y,ll w)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(t[dep][i].dis[x]+t[dep][i].dis[y]==Max)</span><br><span class="line">&#123;</span><br><span class="line">t[dep][i].Add(x,w);</span><br><span class="line">t[dep][i].Add(y,w);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(y&lt;id[mid][<span class="hljs-number">0</span>])modify(l,mid<span class="hljs-number">-1</span>,dep+<span class="hljs-number">1</span>,x,y,w);</span><br><span class="line"><span class="hljs-keyword">else</span> modify(mid+<span class="hljs-number">1</span>,r,dep+<span class="hljs-number">1</span>,x,y,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> dep,<span class="hljs-keyword">int</span> u)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;ll ret=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">ll s=t[dep][i].query(u);</span><br><span class="line"><span class="hljs-keyword">if</span>(id[mid][i]==u)s&gt;&gt;=<span class="hljs-number">1</span>;</span><br><span class="line">ret+=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(u&lt;id[mid][<span class="hljs-number">0</span>])ret+=query(l,mid<span class="hljs-number">-1</span>,dep+<span class="hljs-number">1</span>,u);</span><br><span class="line"><span class="hljs-keyword">if</span>(u&gt;id[mid][m<span class="hljs-number">-1</span>])ret+=query(mid+<span class="hljs-number">1</span>,r,dep+<span class="hljs-number">1</span>,u);</span><br><span class="line"><span class="hljs-keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">m=gi();n=gi();Q=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)</span><br><span class="line">id[i][j]=++tot;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m<span class="hljs-number">-1</span>;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=id[j][i],v=id[j][i+<span class="hljs-number">1</span>];ll w=gl();</span><br><span class="line">g[u].push_back(mp(w,v));</span><br><span class="line">g[v].push_back(mp(w,u));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n<span class="hljs-number">-1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=id[j][i],v=id[j+<span class="hljs-number">1</span>][i];ll w=gl();</span><br><span class="line">g[u].push_back(mp(w,v));</span><br><span class="line">g[v].push_back(mp(w,u));</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">while</span>(Q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> opt=gi();</span><br><span class="line"><span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x=gi()<span class="hljs-number">-1</span>,y=gi()<span class="hljs-number">-1</span>,xx=gi()<span class="hljs-number">-1</span>,yy=gi()<span class="hljs-number">-1</span>;ll c=gl();</span><br><span class="line"><span class="hljs-keyword">int</span> u=id[y][x],v=id[yy][xx];</span><br><span class="line"><span class="hljs-keyword">if</span>(u&gt;v)swap(u,v);</span><br><span class="line">Max=<span class="hljs-number">1e18</span>;calc(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,u,v);</span><br><span class="line">modify(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,u,v,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x=gi()<span class="hljs-number">-1</span>,y=gi()<span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> u=id[y][x];</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,query(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,u));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.codechef.com/problems/QGRID&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeChef&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;给你一个m*n的网格图(m&amp;lt;=3),有Q个询问:&lt;br&gt;opt=1,将(x1,y1)-&amp;gt;(x2,y2)的最短路上的点权+c.&lt;br&gt;opt=2,求点(x,y)的点权.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="最短路" scheme="https://blog.mle-world.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="分治" scheme="https://blog.mle-world.cn/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="最短路径树" scheme="https://blog.mle-world.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder3611 Tree MST</title>
    <link href="https://blog.mle-world.cn/atcoder3611-tree-mst/"/>
    <id>https://blog.mle-world.cn/atcoder3611-tree-mst/</id>
    <published>2019-03-03T09:57:27.000Z</published>
    <updated>2019-03-03T10:09:28.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://cf17-final.contest.atcoder.jp/tasks/cf17_final_j?lang=en" target="_blank" rel="noopener">Atcoder</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>给你$n$个点的树,每条边有边权,每一个点有点权.</p><p>他们两两之间可以构成一个完全图,边$(u,v)$的代价是$w_u+w_v+dis(u,v)$.</p><p>求它的最小生成树.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑这个式子的形成:</p><p>$w_u+w_v+dis(u,v)$</p><p>emmm,发现有个dis,考虑一下点分治!</p><p>对于每一个重心的子树,找一个$dis(u,root)+w[u]$的最小的点.</p><p>那么其他的点一定在这个子树里面到他最优.</p><p>然后直接连边然后跑最小生成树就好了.</p><p>复杂度的证明的话,就是:</p><ul><li><p>点分的复杂度是$O(nlog(n))$的.</p></li><li><p>加入的边的级别是$O(nlog(n))$的.</p></li><li><p>总复杂度就是$O(nlog(n)^2)$的.</p></li></ul><p>那么就可以放心的写了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&lt;=<span class="hljs-string">'9'</span> &amp;&amp; ch&gt;=<span class="hljs-string">'0'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">233333</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> front[N],nxt[N&lt;&lt;<span class="hljs-number">1</span>],to[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>],W[N],n,m,cnt;</span><br><span class="line"><span class="hljs-keyword">int</span> siz[N],g[N],root,sum,vis[N];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> u,v;ll w;</span><br><span class="line"><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node&amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N*<span class="hljs-number">50</span>];</span><br><span class="line">ll Min;</span><br><span class="line"><span class="hljs-keyword">int</span> p;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> val)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">to[++cnt]=v;nxt[cnt]=front[u];front[u]=cnt;</span><br><span class="line">w[cnt]=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> fa)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">siz[u]=<span class="hljs-number">1</span>;g[u]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(v==fa || vis[v])<span class="hljs-keyword">continue</span>;</span><br><span class="line">getroot(v,u);</span><br><span class="line">siz[u]+=siz[v];</span><br><span class="line">g[u]=max(g[u],siz[v]);</span><br><span class="line">&#125;</span><br><span class="line">g[u]=max(g[u],sum-siz[u]);</span><br><span class="line"><span class="hljs-keyword">if</span>(g[u]&lt;g[root])root=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> fa,ll dep)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(Min&gt;W[u]+dep)&#123;Min=W[u]+dep;p=u;&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(v==fa || vis[v])<span class="hljs-keyword">continue</span>;</span><br><span class="line">dfs(v,u,dep+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Link</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> fa,ll dep)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">e[++m]=(node)&#123;u,p,dep+Min+W[u]&#125;;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(v==fa || vis[v])<span class="hljs-keyword">continue</span>;</span><br><span class="line">Link(v,u,dep+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line">Min=<span class="hljs-number">1e18</span>+<span class="hljs-number">10</span>;p=<span class="hljs-number">0</span>;</span><br><span class="line">dfs(u,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);Link(u,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;</span><br><span class="line">sum=siz[v];root=<span class="hljs-number">0</span>;</span><br><span class="line">getroot(v,u);</span><br><span class="line">solve(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> f[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(f[x]!=x)f[x]=find(f[x]);</span><br><span class="line"><span class="hljs-keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)W[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=gi(),v=gi(),val=gi();</span><br><span class="line">Add(u,v,val);Add(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line">g[<span class="hljs-number">0</span>]=n+<span class="hljs-number">1</span>;sum=n;</span><br><span class="line">getroot(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);</span><br><span class="line">solve(root);</span><br><span class="line">sort(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line">ll ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=find(e[i].u),v=find(e[i].v);</span><br><span class="line"><span class="hljs-keyword">if</span>(u!=v)</span><br><span class="line">&#123;</span><br><span class="line">ans+=e[i].w;</span><br><span class="line">k++;f[v]=u;</span><br><span class="line"><span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cf17-final.contest.atcoder.jp/tasks/cf17_final_j?lang=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atcoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;给你$n$个点的树,每条边有边权,每一个点有点权.&lt;/p&gt;
&lt;p&gt;他们两两之间可以构成一个完全图,边$(u,v)$的代价是$w_u+w_v+dis(u,v)$.&lt;/p&gt;
&lt;p&gt;求它的最小生成树.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="Kruscal" scheme="https://blog.mle-world.cn/tags/Kruscal/"/>
    
      <category term="点分治" scheme="https://blog.mle-world.cn/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>[JSOI2010]满汉全席</title>
    <link href="https://blog.mle-world.cn/jsoi2010-%E6%BB%A1%E6%B1%89%E5%85%A8%E5%B8%AD/"/>
    <id>https://blog.mle-world.cn/jsoi2010-满汉全席/</id>
    <published>2019-03-01T23:32:26.000Z</published>
    <updated>2019-03-02T00:01:28.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=1823" target="_blank" rel="noopener">BZOJ</a></p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这不就是2-SAT的模板题?<br>不会2-SAT模板?<br><del>那你也是很菜了</del>.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">210</span>,M=<span class="hljs-number">1010</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> front[N],to[M&lt;&lt;<span class="hljs-number">1</span>],nxt[M&lt;&lt;<span class="hljs-number">1</span>],cnt,dfn[N],Time,low[N],s[N],vis[N],sta,n,m,scc,bl[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">to[++cnt]=v;nxt[cnt]=front[u];front[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++Time;s[sta++]=u;vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(!dfn[v])</span><br><span class="line">&#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u]=min(low[u],low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vis[v])low[u]=min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">&#123;</span><br><span class="line">scc++;</span><br><span class="line"><span class="hljs-keyword">int</span> x;</span><br><span class="line"><span class="hljs-keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x=s[--sta];</span><br><span class="line">bl[x]=scc;</span><br><span class="line">vis[x]=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;<span class="hljs-keyword">while</span>(x!=u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"out.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line"><span class="hljs-keyword">int</span> T=gi();</span><br><span class="line"><span class="hljs-keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=gi();m=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)front[i]=<span class="hljs-number">0</span>;cnt=<span class="hljs-number">0</span>;Time=<span class="hljs-number">0</span>;scc=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)dfn[i]=low[i]=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> ch=getchar();<span class="hljs-keyword">int</span> a,b,x,y;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">'m'</span> &amp;&amp; ch!=<span class="hljs-string">'h'</span>)ch=getchar();</span><br><span class="line">a=ch==<span class="hljs-string">'h'</span>;</span><br><span class="line">x=gi();</span><br><span class="line">ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">'m'</span> &amp;&amp; ch!=<span class="hljs-string">'h'</span>)ch=getchar();</span><br><span class="line">b=ch==<span class="hljs-string">'h'</span>;</span><br><span class="line">y=gi();</span><br><span class="line">Add(x+a*n,y+(b^<span class="hljs-number">1</span>)*n);</span><br><span class="line">Add(y+b*n,x+(a^<span class="hljs-number">1</span>)*n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<span class="hljs-keyword">if</span>(!dfn[i])tarjan(i);</span><br><span class="line"><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(re <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(bl[i]==bl[i+n])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">puts</span>(<span class="hljs-string">"BAD"</span>);flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(!flag)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"GOOD"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=1823&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="2-SAT" scheme="https://blog.mle-world.cn/tags/2-SAT/"/>
    
  </entry>
  
  <entry>
    <title>Cerc2012 Farm and factory</title>
    <link href="https://blog.mle-world.cn/cerc2012-farm-and-factory/"/>
    <id>https://blog.mle-world.cn/cerc2012-farm-and-factory/</id>
    <published>2019-03-01T12:36:42.000Z</published>
    <updated>2019-03-01T12:44:55.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=4061" target="_blank" rel="noopener">BZOJ</a><br>很可惜这是一道权限题.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先设:</p><ul><li>$f_i$表示$1~i$的最短路.</li><li>$g_i$表示$2~i$的最短路</li><li>$s_i$表示$new~i$的最短路</li></ul><p>这个东西随便化简一下就是一个切比雪夫距离.<br>发现这是一个正方形,旋转45°就是曼哈顿距离.<br>然后中位数随便搞一下就好了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">300010</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> Inf=<span class="hljs-number">1e18</span>+<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> to[M&lt;&lt;<span class="hljs-number">1</span>],nxt[M&lt;&lt;<span class="hljs-number">1</span>],cnt,front[N];</span><br><span class="line"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">int</span>&gt; pii;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span></span><br><span class="line">priority_queue&lt;pii,<span class="hljs-built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt;q;</span><br><span class="line"><span class="hljs-keyword">double</span> f[N],g[N],a[N],b[N],w[M&lt;&lt;<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> vis[N],n,m;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">double</span> val)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">to[++cnt]=v;nxt[cnt]=front[u];front[u]=cnt;</span><br><span class="line">w[cnt]=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"out.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line"><span class="hljs-keyword">int</span> T=gi();</span><br><span class="line"><span class="hljs-keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(front,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(front));cnt=<span class="hljs-number">0</span>;</span><br><span class="line">n=gi();m=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=gi(),v=gi();<span class="hljs-keyword">double</span> val;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;val);</span><br><span class="line">Add(u,v,val);Add(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i]=Inf,vis[i]=<span class="hljs-number">0</span>;</span><br><span class="line">f[<span class="hljs-number">1</span>]=<span class="hljs-number">0.0</span>;q.push(mp(<span class="hljs-number">0.0</span>,<span class="hljs-number">1</span>));</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">pii now=q.top();q.pop();<span class="hljs-keyword">int</span> u=now.second;</span><br><span class="line"><span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(f[v]&gt;f[u]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">f[v]=f[u]+w[i];</span><br><span class="line">q.push(mp(f[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)g[i]=Inf,vis[i]=<span class="hljs-number">0</span>;</span><br><span class="line">g[<span class="hljs-number">2</span>]=<span class="hljs-number">0.0</span>;q.push(mp(<span class="hljs-number">0.0</span>,<span class="hljs-number">2</span>));</span><br><span class="line"><span class="hljs-keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">pii now=q.top();q.pop();<span class="hljs-keyword">int</span> u=now.second;</span><br><span class="line"><span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(g[v]&gt;g[u]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">g[v]=g[u]+w[i];</span><br><span class="line">q.push(mp(g[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">a[i]=f[i]+g[i];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">b[i]=f[i]-g[i];</span><br><span class="line">sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);sort(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">double</span> ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)ans+=<span class="hljs-built_in">fabs</span>(a[i]-a[(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)ans+=<span class="hljs-built_in">fabs</span>(b[i]-b[(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]);</span><br><span class="line">ans/=<span class="hljs-number">2</span>*n;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.10lf\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lydsy.com/JudgeOnline/problem.php?id=4061&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ&lt;/a&gt;&lt;br&gt;很可惜这是一道权限题.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="最短路" scheme="https://blog.mle-world.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="几何" scheme="https://blog.mle-world.cn/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder2134 Zigzag MST</title>
    <link href="https://blog.mle-world.cn/atcoder2134-zigzag-mst/"/>
    <id>https://blog.mle-world.cn/atcoder2134-zigzag-mst/</id>
    <published>2019-03-01T08:56:36.000Z</published>
    <updated>2019-03-04T09:30:00.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://cf16-final.contest.atcoder.jp/tasks/codefestival_2016_final_g?lang=en" target="_blank" rel="noopener">Atcoder</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>给出n个点,编号为0~n-1.</p><p>现在给出Q个加边操作,每一次的系数为$a,b,c$.</p><p>每一次可以插入无限条边,插入规则大致是:$(Ai,Bi,Ci)(Bi,Ai+1,Ci+1),(Ai+1,Bi+1,Ci+2)$等等,求给定图的最小生成树.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="引入-假"><a href="#引入-假" class="headerlink" title="引入(假)"></a>引入(假)</h3><p>在写题目之前先插播一条广告:<br><a href="https://lydsy.com/JudgeOnline/wttl/thread.php?tid=6620" target="_blank" rel="noopener">有么有人资磁yyb小姐姐和zsy小哥哥在一起啊</a><del>萝卜你应该要给我广告费</del></p><h3 id="引入-真"><a href="#引入-真" class="headerlink" title="引入(真)"></a>引入(真)</h3><p>如果现在有这样两条边摆在你面前:<br>$(a,b,x)和(b,c,y)$<br>我们知道$x&lt;y$,那么$(b,c,y)$就可以转换为$(a,c,y)$<br>画一个图来深刻理解一下:<br><img src="https://s2.ax1x.com/2019/03/01/kHv1cq.png" alt="kHv1cq.png"><br><img src="https://s2.ax1x.com/2019/03/01/kHvl3n.png" alt="kHvl3n.png"><br><strong>其实这两个是等价的!</strong></p><h3 id="关于本题"><a href="#关于本题" class="headerlink" title="关于本题"></a>关于本题</h3><p>我们发现它的连边真心鬼畜,按照上面的那个什么替换一下?<br>$(a,b,c)与(b,a+1,c+1)$<br>emmm,这不就是<br>$(a,b,c)与(a,a+1,c+1)$<br>那么我们每一条限制就变成了一堆相邻的边的权值了.<br>当然,注意$(a,b,c)$并没有消失!!!<br>现在问题转换成如何快速求出每一条边的最小权值!<br>注意到$a-&gt;a+1$和$b-&gt;b+1$一定是最小的两条边权,那么后面的一定会用它们更新!<br>于是我们先把$a,b$的权值给赋上,然后按照顺序扫一遍就可以了.<br>最后一个容易咕的地方就是:<br>每次的贡献应当是$+2$而不是$+1$,因为它是两边同时进行.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">400010</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> val[N],n,q,cnt,f[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> u,v,w;</span><br><span class="line"><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node&amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(f[x]!=x)f[x]=find(f[x]);</span><br><span class="line"><span class="hljs-keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">n=gi();q=gi();</span><br><span class="line"><span class="hljs-built_in">memset</span>(val,<span class="hljs-number">127</span>,<span class="hljs-keyword">sizeof</span>(val));</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=gi(),b=gi(),c=gi();</span><br><span class="line">e[++cnt]=(node)&#123;a,b,c&#125;;</span><br><span class="line">val[a]=min(val[a],c+<span class="hljs-number">1</span>);</span><br><span class="line">val[b]=min(val[b],c+<span class="hljs-number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(val[pos]&gt;val[i])pos=i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=(pos+<span class="hljs-number">1</span>)%n,j=pos;i!=pos;j=i,i=(i+<span class="hljs-number">1</span>)%n)</span><br><span class="line">val[i]=min(val[i],val[j]+<span class="hljs-number">2</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)</span><br><span class="line">e[++cnt]=(node)&#123;i,i+<span class="hljs-number">1</span>,val[i]&#125;;</span><br><span class="line">e[++cnt]=(node)&#123;n<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,val[n<span class="hljs-number">-1</span>]&#125;;</span><br><span class="line">sort(e+<span class="hljs-number">1</span>,e+cnt+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)f[i]=i;</span><br><span class="line"><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=e[i].u,v=e[i].v;</span><br><span class="line"><span class="hljs-keyword">if</span>(find(u)!=find(v))</span><br><span class="line">&#123;</span><br><span class="line">ans+=e[i].w,f[find(u)]=find(v);</span><br><span class="line">k++;</span><br><span class="line"><span class="hljs-keyword">if</span>(k==n<span class="hljs-number">-1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cf16-final.contest.atcoder.jp/tasks/codefestival_2016_final_g?lang=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atcoder&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;给出n个点,编号为0~n-1.&lt;/p&gt;
&lt;p&gt;现在给出Q个加边操作,每一次的系数为$a,b,c$.&lt;/p&gt;
&lt;p&gt;每一次可以插入无限条边,插入规则大致是:$(Ai,Bi,Ci)(Bi,Ai+1,Ci+1),(Ai+1,Bi+1,Ci+2)$等等,求给定图的最小生成树.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="并查集" scheme="https://blog.mle-world.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="Kruscal" scheme="https://blog.mle-world.cn/tags/Kruscal/"/>
    
      <category term="Trick" scheme="https://blog.mle-world.cn/tags/Trick/"/>
    
      <category term="图论" scheme="https://blog.mle-world.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces891C Envy</title>
    <link href="https://blog.mle-world.cn/codeforces891c-envy/"/>
    <id>https://blog.mle-world.cn/codeforces891c-envy/</id>
    <published>2019-03-01T08:33:40.000Z</published>
    <updated>2019-03-01T08:57:52.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="http://codeforces.com/problemset/problem/891/C" target="_blank" rel="noopener">CodeForces</a></p><h2 id="题目翻译"><a href="#题目翻译" class="headerlink" title="题目翻译"></a>题目翻译</h2><p>给你n个节点,m条边以及q条询问.<br>每一次询问有k条边,询问这k条边能否都在MST上.<br>可以就输出”YES”,否则输出”NO”.</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这是一个翻遍全网都无法找到的新型题解!<del>(至少在2019.3月份之前找不到)</del><br>我们考虑最小生成树的一个性质:</p><ul><li>加入完相同的边权后连通性是一样的.</li></ul><p>证明:</p><ol><li>考虑按照各种顺序排序,如果某一条边不会与其他的一同加入而产生环,那么显然他是一定会被加入的</li><li>如果有冲突,那么这些边的加入顺序就不重要了,因为他们一定会构成一个环少一条边.</li></ol><p>那么利用这个性质,我们很容易做出来这道题目.</p><p>对于每一条边,假设它是一个三元组(u,v,w).</p><p>维护一个(uu,vv)表示加入完所有的$w’$&lt;$w$的边后的$u$所在的联通块和$v$所在的联通块.</p><p>我们考虑不能够插入的情况:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(uu)==find(vv)</span><br></pre></td></tr></table></figure><p>那么只需要扫一遍所有的边,然后如果有不行的就直接输出”NO”,最后输出”YES”就好了.</p><p>当然跑的时候是需要维护连通性的(就是还是要加边!).</p><p>还原并查集数组的话可以把(uu,vv)当成是关键点,所以只需要改变这一些点的fa就可以了.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">500010</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> u,v,w,uu,vv,id;</span><br><span class="line"><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> node&amp;b)<span class="hljs-keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N],a[N];</span><br><span class="line"><span class="hljs-keyword">int</span> f[N],n,m,q,c[N],id[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(f[x]!=x)f[x]=find(f[x]);</span><br><span class="line"><span class="hljs-keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="hljs-string">"in.in"</span>,<span class="hljs-string">"r"</span>,<span class="hljs-built_in">stdin</span>);</span><br><span class="line">freopen(<span class="hljs-string">"out.out"</span>,<span class="hljs-string">"w"</span>,<span class="hljs-built_in">stdout</span>);</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">n=gi();m=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">e[i].u=gi(),e[i].v=gi(),e[i].w=gi();</span><br><span class="line">e[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">id[e[i].id]=i;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)f[i]=i;</span><br><span class="line"><span class="hljs-keyword">int</span> last=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(e[i].w!=e[i<span class="hljs-number">-1</span>].w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=last;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=find(e[j].u),v=find(e[j].v);</span><br><span class="line"><span class="hljs-keyword">if</span>(u!=v)f[v]=u;</span><br><span class="line">&#125;</span><br><span class="line">last=i;</span><br><span class="line">&#125;</span><br><span class="line">e[i].uu=find(e[i].u);</span><br><span class="line">e[i].vv=find(e[i].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=last;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=find(e[j].u),v=find(e[j].v);</span><br><span class="line"><span class="hljs-keyword">if</span>(u!=v)f[v]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//for(int i=1;i&lt;=m;i++)</span></span><br><span class="line"><span class="hljs-comment">//printf("%d %d %d %d %d\n",e[i].u,e[i].v,e[i].w,e[i].uu,e[i].vv);</span></span><br><span class="line">q=gi();</span><br><span class="line"><span class="hljs-keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> k=gi(),sta=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)</span><br><span class="line">c[i]=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[++sta]=e[id[c[i]]];</span><br><span class="line">f[a[sta].uu]=a[sta].uu;</span><br><span class="line">f[a[sta].vv]=a[sta].vv;</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="hljs-number">1</span>,a+sta+<span class="hljs-number">1</span>);<span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=sta;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> u=a[i].uu,v=a[i].vv;</span><br><span class="line"><span class="hljs-keyword">if</span>(find(u)==find(v))</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//if(!q)printf("%d %d %d %d\n",u,v,find(u),find(v));</span></span><br><span class="line">f[find(u)]=find(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">"YES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;传送门&quot;&gt;&lt;a href=&quot;#传送门&quot; class=&quot;headerlink&quot; title=&quot;传送门&quot;&gt;&lt;/a&gt;传送门&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/891/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeForces&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目翻译&quot;&gt;&lt;a href=&quot;#题目翻译&quot; class=&quot;headerlink&quot; title=&quot;题目翻译&quot;&gt;&lt;/a&gt;题目翻译&lt;/h2&gt;&lt;p&gt;给你n个节点,m条边以及q条询问.&lt;br&gt;每一次询问有k条边,询问这k条边能否都在MST上.&lt;br&gt;可以就输出”YES”,否则输出”NO”.&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="并查集" scheme="https://blog.mle-world.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="Kruscal" scheme="https://blog.mle-world.cn/tags/Kruscal/"/>
    
      <category term="Trick" scheme="https://blog.mle-world.cn/tags/Trick/"/>
    
      <category term="图论" scheme="https://blog.mle-world.cn/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>HAOI2007 覆盖问题</title>
    <link href="https://blog.mle-world.cn/haoi2007-%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.mle-world.cn/haoi2007-覆盖问题/</id>
    <published>2019-03-01T03:59:34.000Z</published>
    <updated>2019-03-01T04:02:35.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小清新思维题.</p><p>最近肯定需要一些思维题挽救我这种碰到题目只会模板的菜鸡.</p><p>这题腾空出世?</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考虑一下我们二分答案怎么做?</p><p>首先转换一下,将这些点用一个尽可能小的矩形全部覆盖.</p><p>那么我们求的三个正方形一定会与这一些边有交.</p><p>然后前两个正方形直接看是和哪一个角相交.最后一个因为只剩下一个正方形,判断可行性即可.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">1e9</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span>&#123;</span><span class="hljs-keyword">int</span> x[<span class="hljs-number">20010</span>],y[<span class="hljs-number">20010</span>],top;&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> mid;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(data &amp;a,<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1,<span class="hljs-keyword">int</span> x2,<span class="hljs-keyword">int</span> y2)</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> tot=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=a.top;i++)</span><br><span class="line"><span class="hljs-keyword">if</span>(a.x[i]&lt;x1||a.x[i]&gt;x2||a.y[i]&lt;y1||a.y[i]&gt;y2)</span><br><span class="line">&#123;</span><br><span class="line">tot++;</span><br><span class="line">a.x[tot]=a.x[i];</span><br><span class="line">a.y[tot]=a.y[i];</span><br><span class="line">&#125;</span><br><span class="line">a.top=tot;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(data &amp;a,<span class="hljs-keyword">int</span> fc)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> x1=inf,y1=inf,x2=-inf,y2=-inf;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=a.top;i++)</span><br><span class="line">&#123;</span><br><span class="line">x1=min(a.x[i],x1),x2=max(a.x[i],x2);</span><br><span class="line">y1=min(a.y[i],y1),y2=max(a.y[i],y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(fc==<span class="hljs-number">1</span>)</span><br><span class="line">cut(a,x1,y1,x1+mid,y1+mid);</span><br><span class="line"><span class="hljs-keyword">if</span>(fc==<span class="hljs-number">2</span>)</span><br><span class="line">cut(a,x2-mid,y1,x2,y1+mid);</span><br><span class="line"><span class="hljs-keyword">if</span>(fc==<span class="hljs-number">3</span>)</span><br><span class="line">cut(a,x1,y2-mid,x1+mid,y2);</span><br><span class="line"><span class="hljs-keyword">if</span>(fc==<span class="hljs-number">4</span>)</span><br><span class="line">cut(a,x2-mid,y2-mid,x2,y2);</span><br><span class="line">&#125;</span><br><span class="line">data a;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">jud</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">data b;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>;x&lt;=<span class="hljs-number">4</span>;x++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> y=<span class="hljs-number">1</span>;y&lt;=<span class="hljs-number">4</span>;y++)</span><br><span class="line">&#123;</span><br><span class="line">b.top=a.top;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=b.top;i++)</span><br><span class="line">b.x[i]=a.x[i],b.y[i]=a.y[i];</span><br><span class="line">solve(b,x);solve(b,y);</span><br><span class="line">    <span class="hljs-keyword">int</span> x1=inf,y1=inf,x2=-inf,y2=-inf;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=b.top;i++)</span><br><span class="line">&#123;</span><br><span class="line">x1=min(b.x[i],x1),x2=max(b.x[i],x2);</span><br><span class="line">y1=min(b.y[i],y1),y2=max(b.y[i],y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(x2-x1&lt;=mid&amp;&amp;y2-y1&lt;=mid)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)a.x[i]=gi(),a.y[i]=gi();</span><br><span class="line">a.top=n;</span><br><span class="line"><span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r=inf,ans=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(jud())&#123;r=mid<span class="hljs-number">-1</span>;ans=mid;&#125;</span><br><span class="line"><span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;小清新思维题.&lt;/p&gt;
&lt;p&gt;最近肯定需要一些思维题挽救我这种碰到题目只会模板的菜鸡.&lt;/p&gt;
&lt;p&gt;这题腾空出世?&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="二分答案" scheme="https://blog.mle-world.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="贪心" scheme="https://blog.mle-world.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>HAOI2006 数字序列</title>
    <link href="https://blog.mle-world.cn/haoi2006-%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97/"/>
    <id>https://blog.mle-world.cn/haoi2006-数字序列/</id>
    <published>2019-03-01T03:58:09.000Z</published>
    <updated>2019-03-01T04:02:13.754Z</updated>
    
    <content type="html"><![CDATA[<p>dp好题?</p><h2 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h2><p>第一问我会做!令$b_i=a_i-i$,求一个最长不下降子序列.</p><p>$n-ans$就是最终的答案.</p><h2 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h2><p>好难啊.不会.挖坑待补.</p><p>考虑一下对于一个i~j的可能符合情况,定然存在一个$k$在i~k之中为$a_i$,k~j之中为$a_j$.</p><p>然后就可以dp了.</p><p>这个转移比较玄学.如果不随机就GG了.</p><p><img src="https://s2.ax1x.com/2019/01/24/kZ43tO.png" alt="随机的证明"></p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> re register</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> file(a) freopen(a<span class="hljs-meta-string">".in"</span>,<span class="hljs-meta-string">"r"</span>,stdin);freopen(a<span class="hljs-meta-string">".out"</span>,<span class="hljs-meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gi</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> f=<span class="hljs-number">1</span>,sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">char</span> ch=getchar();</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;<span class="hljs-string">'9'</span> || ch&lt;<span class="hljs-string">'0'</span>)&#123;<span class="hljs-keyword">if</span>(ch==<span class="hljs-string">'-'</span>)f=<span class="hljs-number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">'0'</span> &amp;&amp; ch&lt;=<span class="hljs-string">'9'</span>)&#123;sum=(sum&lt;&lt;<span class="hljs-number">3</span>)+(sum&lt;&lt;<span class="hljs-number">1</span>)+ch-<span class="hljs-string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> f*sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">50010</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[N],n,L,cnt,mn[N],f[N],front[N],to[N&lt;&lt;<span class="hljs-number">2</span>],nxt[N&lt;&lt;<span class="hljs-number">2</span>];</span><br><span class="line">ll g[N],s1[N],s2[N];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r=L,t=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(mn[mid]&lt;=x)t=mid,l=mid+<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">memset</span>(mn,<span class="hljs-number">127</span>,<span class="hljs-keyword">sizeof</span>(mn));</span><br><span class="line">mn[<span class="hljs-number">0</span>]=-(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> q=find(a[i]);</span><br><span class="line">f[i]=q+<span class="hljs-number">1</span>;</span><br><span class="line">L=max(L,f[i]);</span><br><span class="line">mn[q+<span class="hljs-number">1</span>]=min(mn[q+<span class="hljs-number">1</span>],a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span></span>&#123;</span><br><span class="line">to[++cnt]=v;nxt[cnt]=front[u];front[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n;~i;i--)&#123;</span><br><span class="line">Add(f[i],i);</span><br><span class="line">g[i]=<span class="hljs-number">1l</span>l&lt;&lt;<span class="hljs-number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line">g[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;a[<span class="hljs-number">0</span>]=-(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> u=<span class="hljs-number">1</span>;u&lt;=n;u++)</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=front[f[u]<span class="hljs-number">-1</span>];i;i=nxt[i])&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v=to[i];</span><br><span class="line"><span class="hljs-keyword">if</span>(v&gt;u)<span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[v]&gt;a[u])<span class="hljs-keyword">continue</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&lt;=u;j++)s1[j]=<span class="hljs-built_in">abs</span>(a[v]-a[j]),s2[j]=<span class="hljs-built_in">abs</span>(a[u]-a[j]);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v+<span class="hljs-number">1</span>;j&lt;=u;j++)</span><br><span class="line">s1[j]+=s1[j<span class="hljs-number">-1</span>],s2[j]+=s2[j<span class="hljs-number">-1</span>];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=v;j&lt;u;j++)</span><br><span class="line">g[u]=min(g[u],g[v]+s1[j]-s1[v]+s2[u]-s2[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">n=gi();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)a[i]=gi()-i;</span><br><span class="line">a[++n]=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>;</span><br><span class="line">dp();solve();</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n%lld\n"</span>,n-f[n],g[n]);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dp好题?&lt;/p&gt;
&lt;h2 id=&quot;第一问&quot;&gt;&lt;a href=&quot;#第一问&quot; class=&quot;headerlink&quot; title=&quot;第一问&quot;&gt;&lt;/a&gt;第一问&lt;/h2&gt;&lt;p&gt;第一问我会做!令$b_i=a_i-i$,求一个最长不下降子序列.&lt;/p&gt;
&lt;p&gt;$n-ans$就是最终的答案.&lt;/p&gt;
&lt;h2 id=&quot;第二问&quot;&gt;&lt;a href=&quot;#第二问&quot; class=&quot;headerlink&quot; title=&quot;第二问&quot;&gt;&lt;/a&gt;第二问&lt;/h2&gt;&lt;p&gt;好难啊.不会.挖坑待补.&lt;/p&gt;
&lt;p&gt;考虑一下对于一个i~j的可能符合情况,定然存在一个$k$在i~k之中为$a_i$,k~j之中为$a_j$.&lt;/p&gt;
&lt;p&gt;然后就可以dp了.&lt;/p&gt;
&lt;p&gt;这个转移比较玄学.如果不随机就GG了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/01/24/kZ43tO.png&quot; alt=&quot;随机的证明&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://blog.mle-world.cn/categories/Solution/"/>
    
    
      <category term="dp" scheme="https://blog.mle-world.cn/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="https://blog.mle-world.cn/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.mle-world.cn/欢迎来到我的博客/</id>
    <published>2019-02-28T07:00:00.000Z</published>
    <updated>2019-02-28T23:46:50.054Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的hexo博客!</p><a id="more"></a><p>emmm,我也不知道自己有多少博客,但是这一次一定是最后一个了.</p><p>希望能够开的很久吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的hexo博客!&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://blog.mle-world.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="介绍" scheme="https://blog.mle-world.cn/tags/%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
